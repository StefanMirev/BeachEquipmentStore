// <auto-generated />
using System;
using BeachEquipmentStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeachEquipmentStore.Data.Migrations
{
    [DbContext(typeof(EquipmentStoreDbContext))]
    [Migration("20230811090254_AddedManufacturer-ChangedCategory")]
    partial class AddedManufacturerChangedCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bdf9630-9453-421e-976b-41bab92d097b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f5dd1a9-7656-4d67-ae0d-1b1a12019cef",
                            Email = "p.petrov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "p.petrov@mail.com",
                            NormalizedUserName = "p.petrov@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEM/WnWwb0OHBPzZ9+gEIb7QdByYcpq+wLxWSVblCYIGQURLuQXIFJvy2SntCTVZKOA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "p.petrov@mail.com"
                        },
                        new
                        {
                            Id = new Guid("b60b0101-91f3-4e1a-95d0-3a857f0e6af9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d76a8a06-081e-483c-b86d-c0c74dcfe369",
                            Email = "n.flacko@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Nicko",
                            LastName = "Flacko",
                            LockoutEnabled = false,
                            NormalizedEmail = "n.flacko@mail.com",
                            NormalizedUserName = "n.flacko@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOkVWiLqM+2AX+1QipgyC1+gPMZzOo1ABSJBnIh6fbLupX/dqISWQGuzVscxhkDAyQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "n.flacko@mail.com"
                        },
                        new
                        {
                            Id = new Guid("ff11abd6-dee6-4ccc-9991-9c92f25379d1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1598c1a3-4015-4adb-9bf7-a1e30251d575",
                            Email = "s.sarafov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamat",
                            LastName = "Sarafov",
                            LockoutEnabled = false,
                            NormalizedEmail = "s.sarafov@mail.com",
                            NormalizedUserName = "s.sarafov@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJrCU/kMHR6WUambRI+x12T0l7cCVjoYMVs4ZyiPrZPmOG6JfQqaXTe8oX7ZpDEQ6w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "s.sarafov@mail.com"
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.CartItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=16xAqp3w9XhGunshFMlyCkRqaklNFqjnM",
                            Name = "Bag"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1_2OH8K54pi-UsiYBCVjkLHRsYXTrp9Gy",
                            Name = "Ball"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=167EWd3eT6d-rsAYwOf9F2Il61FydivXd",
                            Name = "Beach Toy"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1i9tFNjRi7OAW3lle188G4DMA2aMSjvix",
                            Name = "Floaty"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1A7wUFEC7laR2iQBYoMV2pryD4qW8D-gd",
                            Name = "Swimming Equipment"
                        },
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1JdKCD7760eDhZMyz2PMTPs8_cCRlxOIy",
                            Name = "Towel"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=10dHA3b3yfniTLBRqTPUOoG5ViR5haXTF",
                            Name = "Umbrella"
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1ZbyZ2_AsBd35KVUfDOD-f2_D7h3134rl",
                            Name = "Vinex"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1QALhuevKfNfYXoDy5BWciyCVmO0q0VSQ",
                            Name = "Coveri Collection"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1QALhuevKfNfYXoDy5BWciyCVmO0q0VSQ",
                            Name = "CPS TOYS"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1LRaxyxP3SGBDuWVctDyNM9XmYcSiJMWI",
                            Name = "DREAMFOX"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1roo-qFH5hU9-7240YmhdPuHkw-yWZxur",
                            Name = "INTEX"
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=12nW3Spi5yXjBb8-vtNZQsLwfpS8R95nm",
                            Name = "ПУБЛИИДЕЯ"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=18njyWyS9wsNf-RxCBTVXbrJJuaslGi9_",
                            Name = "Shenzhen Befine Sports Goods"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1U1erUAbbYU7DvFDgE0N2_ocWPle6JaD4",
                            Name = "Shui Zhong Bao"
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1AjJF5Ee4jkE5oXTHaCTqT1lVL5RVd5Kg",
                            Name = "Star"
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1VI10CAaFDeulnhDn99rv6_QgDdEGOfVy",
                            Name = "Vanguard Watersports"
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeliveryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Barcode")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60cfeae3-aa7b-4285-bb76-72b03ea2df2e"),
                            Barcode = 57532,
                            CategoryId = 1,
                            Description = "Памучна детска плажна хавлия с изообразени акула и рибки. Грамаж: 380 гр.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1PYh4hEw0qfRH8mDV5fsetWNsk7M5O2pM",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 75 x 170 cm.",
                            Price = 12.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("2c9f3afd-ccab-4da7-8207-67e5786353df"),
                            Barcode = 38527,
                            CategoryId = 1,
                            Description = "Микрофибърна плажна хавлия с изоображение на морско дъно с 2 делфина и с надпис Bulgaria.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1ae-zH1gOHkFhigYFkQMz8L25bZq7LcRF",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 75 x 150 cm.",
                            Price = 4.80m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("15129a98-3f74-4db1-8e8d-469c99541639"),
                            Barcode = 57523,
                            CategoryId = 1,
                            Description = "Памучна плажна хавлия с котвички, синя. Грамаж: 360 гр.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1ZJXJwrHzVu1ptT0qk99CKB3IAJv324dd",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 70 x 140 cm.",
                            Price = 9.30m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("919a76dd-389f-447a-acfe-9e449bc03d02"),
                            Barcode = 57526,
                            CategoryId = 1,
                            Description = "Памучна плажна хавлия с ананаси, розова. Грамаж: 360 гр.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1jjuQ2_r0SZ0QXRLjRFBnuhNIEKtPy1ZF",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 70 x 140 cm.",
                            Price = 9.30m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("b174f4c5-38a6-47f4-9c6b-c78ad0527c44"),
                            Barcode = 56130,
                            CategoryId = 1,
                            Description = "Микрофибърна плажна хавлия с изоображение на русалка и надписи.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1Yp_6Hqt9ZonWq42xy8fU--Uacx1tkxXH",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 75 x 150 cm.",
                            Price = 5.00m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("946a672b-0255-4a71-b622-f57a64777bfc"),
                            Barcode = 58922,
                            CategoryId = 1,
                            Description = "Микрофибърна плажна хавлия с изоображение на китара поставена на плаж.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1dfT4IZEew4CoddEGDakT-PBjw7yredbB",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 75 x 150 cm.",
                            Price = 4.80m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("a85458a2-2b89-4179-80e6-5f0313675064"),
                            Barcode = 55555,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV25. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1NMIiyeqiycf5b3uR53YIMXiBBWeJac16",
                            ManufacturerId = 10,
                            Name = "Пкажен чадър ПУБЛИИДЕЯ, тъмно-зелен.",
                            Price = 14.85m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("c89da55a-c80e-4957-b2e3-a10308a671f6"),
                            Barcode = 44443,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV20+. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1oVbyay6s_Ntr_sj_A18X_FO0w_WmdrVQ",
                            ManufacturerId = 10,
                            Name = "Плажен чадър ПУБЛИИДЕЯ, палми",
                            Price = 6.80m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("8895de30-3790-4d47-90e3-600c8e2da475"),
                            Barcode = 44442,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV20+. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1mrbRxFOHCZAJIHd83oLjKRuAMdqimIO1",
                            ManufacturerId = 10,
                            Name = "Плажен чадър ПУБЛИИДЕЯ, растения",
                            Price = 7.50m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("a31a96ea-5c4f-4d0c-8ed9-91c54f213151"),
                            Barcode = 44444,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV20+. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1S-SjmPB2kfixmsIlSWYhYJch_9xqVK0A",
                            ManufacturerId = 10,
                            Name = "Плажен чадър ПУБЛИИДЕЯ, морски звезди",
                            Price = 6.80m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("cdbc7ffb-9dc0-417f-8d56-2906779f809e"),
                            Barcode = 56718,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени дини и черни палмови листа на бял фон.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=12boBcMRZIpNh9RHSF3hyMASdtpKv8gMH",
                            ManufacturerId = 2,
                            Name = "Плажна Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("3147d75b-261f-4208-81cf-228674a3520d"),
                            Barcode = 56724,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени котва на син фон с рози. ",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1XL6OqirslpRwE0yS-3Jjn_SnDTBsedSc",
                            ManufacturerId = 2,
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("a9548cee-e67b-4b6a-8756-d5f3cf94a6b4"),
                            Barcode = 56723,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени макове на черно-бял фон.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1EI1p_s8zneNfoFyswCEYo-LBG97G5foZ",
                            ManufacturerId = 2,
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("4ae419f9-0fbd-4b42-9980-c2fce684f7bc"),
                            Barcode = 56721,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени миди и рулове на бял фон.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=15DkwJKv2YFkzVRMBR-z6mY9lTYSEwCsk",
                            ManufacturerId = 2,
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("8b4e531f-1e7d-4d81-947e-6eeb998eb5b4"),
                            Barcode = 56720,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени орхидеи на бял фон.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1adYxmlrmBP1xxUCMSUHr1hzxgyB_V27e",
                            ManufacturerId = 2,
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("87e88372-aa19-49ab-bfb0-b2944a6fc3dc"),
                            Barcode = 18040,
                            CategoryId = 4,
                            Description = "Комплектът съдържа гребло, лопатка, сито и формичка риба. Кофичката е с диаметър 29см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1sQ_5ozky2WPN8SW5c9bMvr-zPV2U9atS",
                            ManufacturerId = 1,
                            Name = "Vinex - Комплект кофичка за пясък Дисни",
                            Price = 8.25m,
                            Stock = 16
                        },
                        new
                        {
                            Id = new Guid("67050c99-5ba9-4eae-8050-536b9d2fb725"),
                            Barcode = 17005,
                            CategoryId = 4,
                            Description = "Комплектът съдържа гребло, лопатка, сито и формички риба и костенурка. Кофичката е с диаметър 26см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1u_kQta03e24rGbuGlml_sr6IeyTim7JK",
                            ManufacturerId = 1,
                            Name = "Vinex - Комплект кофичка за пясък Дисни",
                            Price = 6.00m,
                            Stock = 16
                        },
                        new
                        {
                            Id = new Guid("ea696999-f17b-406e-b843-7221d4e09ce7"),
                            Barcode = 10805,
                            CategoryId = 4,
                            Description = "Комплектът съдържа гребло, лопатка, сито и формички риба, костенурка, мида и морска звезда. Кофичката е с диаметър 26см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1JjBWp9oO8b9j8EOH9c4LKPg1NrsLoUQG",
                            ManufacturerId = 1,
                            Name = "Vinex - Комплект кофичка за пясък Дисни",
                            Price = 10.50m,
                            Stock = 16
                        },
                        new
                        {
                            Id = new Guid("f3d6cf43-db73-4e74-8f11-c26a77989384"),
                            Barcode = 33306,
                            CategoryId = 4,
                            Description = " Комплектът съдържа гребло, лопатка, сито, лейка и три формички замък. Кофичката е квадратна, с размери 16 х 16 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1LbA7ETiJBsPWSoxG2jRZz9BHZd91mqHU",
                            ManufacturerId = 1,
                            Name = "Vinex - Комплект кофичка за пясък Дисни",
                            Price = 6.40m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("8883783e-ca3e-44aa-be79-f9be72bd01e8"),
                            Barcode = 36113,
                            CategoryId = 4,
                            Description = "Лопата за пясък, дървена дръжка с дължина 62 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=16sOlSA_p-RfVy4nrdsvQWqsFxhyf1rhU",
                            ManufacturerId = 1,
                            Name = "Vinex - Лопата за пясък",
                            Price = 3.20m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("34cb122e-8d92-4adf-87bc-b5108a187b10"),
                            Barcode = 58849,
                            CategoryId = 4,
                            Description = "Воден пистолет CPS TOYS, асортимент 38 см. Механизъм на помпата - функция помпане, дължина: 38 см, обем на резервоара: 900 мл, изстрелва водата до 8 метра!",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1aasYu2UAFcDPLa6fV-pcOjlpOCXf1xgL",
                            ManufacturerId = 3,
                            Name = "Воден пистолет CPS TOYS 50см",
                            Price = 7.40m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("e74aa083-4d89-4aa6-b498-cc14bf43691e"),
                            Barcode = 42178,
                            CategoryId = 5,
                            Description = "Плувна маска за цяло лице в мрежа S, M силикон, синьо, електрикаво зелено, черно",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1sJxETpJF_FUSyeCO1b4WZXIrgvZjMfQz",
                            ManufacturerId = 6,
                            Name = "Маска за плуване за цяло лице Shenzhen Befine Sports Goods ReefRider",
                            Price = 33.00m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("f0ba9751-c031-412c-869f-1a5c1560dd32"),
                            Barcode = 59139,
                            CategoryId = 5,
                            Description = "Плавниците cа подходящи за гмуркане или тренировки по плуване. Tяхната площ ще даде възможноcт на вcеки любител на водните приключения да cе движи много по-бързо!",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1zGEEZkv8QtIt_HSyBbPimT8mPaUZs8aI",
                            ManufacturerId = 9,
                            Name = "Плавници Vanguard Watersports Super Sport, 35-37 номер",
                            Price = 19.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("c92edb4e-8505-4137-9856-9d72a4ed7db9"),
                            Barcode = 42181,
                            CategoryId = 5,
                            Description = "Плавниците cа подходящи за гмуркане или тренировки по плуване. Tяхната площ ще даде възможноcт на вcеки любител на водните приключения да cе движи много по-бързо!",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1wfcyQO9cHxFYAf-XXfE0DJQjeojKCEnm",
                            ManufacturerId = 9,
                            Name = "Плавници Vanguard Watersports Mega Sport, 39-43 номер",
                            Price = 19.50m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("ef1b626a-5bf7-4481-a408-40500f783b6d"),
                            Barcode = 24040,
                            CategoryId = 5,
                            Description = "Шапка за плуване, текстил. Размери: 21 х 12 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1UdlrRM5yS8ly-EHrcnxlAjZ9o6gyVJys",
                            ManufacturerId = 9,
                            Name = "Шапка за плуване Vanguard Watersports, текстил",
                            Price = 1.35m,
                            Stock = 70
                        },
                        new
                        {
                            Id = new Guid("7df8e8ef-abd9-4d7d-b7a0-036ff8ad3e57"),
                            Barcode = 31386,
                            CategoryId = 5,
                            Description = "Плувни очила, силикон, цветни, здраво прелепващи 13 см. ",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1nS0CyhxqSuY2D1R_jaxCbN9IiSI4F62p",
                            ManufacturerId = 6,
                            Name = "Очила за плуване за деца Shenzhen Befine Sports Goods Fun Goggles",
                            Price = 4.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("28f89133-216a-4ccb-9005-27732ec36d2e"),
                            Barcode = 51375,
                            CategoryId = 5,
                            Description = "Плувни очила за възрастни, широки, черен силикон 18х8 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1AKwwgKcCo1oKSLdLI8TrEjsE2y2Serux",
                            ManufacturerId = 6,
                            Name = "Очила за плуване за възрастни Shenzhen Befine Sports Goods Water Sport",
                            Price = 7.00m,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("0b69cabd-ac44-454a-9ffb-b791534dac58"),
                            Barcode = 42174,
                            CategoryId = 5,
                            Description = "Мундщук от поливинилхлорид за меко и удобно прилягане. Дихателна тръба със среден диаметър и дължина 42 см. Дизайн идеален за деца.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1e-Uh-JIgG65zKjRMtJjnEkkIabVNMNAP",
                            ManufacturerId = 6,
                            Name = "Детски шнорхел Shenzhen Befine Sports Goods Hi-Flo",
                            Price = 3.65m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("94047ef9-d81b-4712-9db0-d91b34d30755"),
                            Barcode = 42172,
                            CategoryId = 5,
                            Description = "Шнорхел за възрастни с удобен термопластичен гумен мундщукшнорхел. Дихателна тръба с висококачествена P.V.C. изработка и дължина 42 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1C9Y9oufHYoCX_vLi11RMZdvCpO9QIMTX",
                            ManufacturerId = 6,
                            Name = "Шнорхел Shenzhen Befine Sports Goods Easy-Flow",
                            Price = 5.50m,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("55cfb240-c296-4c1a-b0f8-a0611f43aaca"),
                            Barcode = 58546,
                            CategoryId = 6,
                            Description = "Алигаторите нe ca тoлкoвa cтpaшни кoлкoтo cи миcлитe. Сeгa имaтe възмoжнocт дa ce зaбaвлявaтe c eдин oт тях в бaceйнa, морeто или дори и нa cушaтa. Алигаторът e c paзмepи, кoитo ca cхoдни c тeзи нa иcтинcкитe му cъбpaтя и e гoтoв зa мнoгo игpи c вaшият мaлчугaн. Изработен е от качествен винил и има 1 здрaва дръжка за захващане зa по-голямa уcтойчивоcт и cигурноcт нa дeтeто. Размер: 168 х 86 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1spWbPR_54kid2eAV123eVgE_LruRdIHr",
                            ManufacturerId = 5,
                            Name = "Надуваема играчка Алигатор INTEX LIL' Gator Ride-on, малък",
                            Price = 19.85m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("37ed49e5-ec06-43fa-b2e4-10439d22ee6b"),
                            Barcode = 49230,
                            CategoryId = 6,
                            Description = "Кaквo мoжe дa нaпpaви плувaнeтo в бaceйнa или в мopeтo oщe пo-зaбaвнo? Нaпpимep aкo дeтeтo влeзe във вoдaтa с пояс с брокат със забавен дизайн във формата на еднорог. Размер: 90 см.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1tDKCXmwpMGz6xseWKB8vWZvdMvow_SrR",
                            ManufacturerId = 5,
                            Name = "Детски надуваем пояс INTEX Пони-Еднорог",
                            Price = 11.80m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("7c6d6142-5b3d-4a49-9399-0ef7454a277a"),
                            Barcode = 36727,
                            CategoryId = 6,
                            Description = "Надуваем остров с диаметър 70 см. Свеж дизайн. Въже за захващане.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1JkLtx0CX48PtHvBwe9wHKmOULBSh_zNJ",
                            ManufacturerId = 7,
                            Name = "Надуваем поясн Диня Shui Zhong Bao Watermelon",
                            Price = 4.20m,
                            Stock = 12
                        },
                        new
                        {
                            Id = new Guid("0bebc0c6-b7ce-423d-8dfe-30c114f7a14e"),
                            Barcode = 56113,
                            CategoryId = 6,
                            Description = "Изработен е от качествен винил и има 4 въздушни камери, голям външeн пpъcтeн зa по-голямa cтaбилноcт и отвоpи зa кpaчeтaтa нa дeтeто, които оcигуpявaт нeговaтa бeзопacноcт и пpeдотвpaтявaт вepоятноcттa от изхлузване от пояca.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1l-4jA8i9_cKkRwVqIcPayyx7RjECP9tB",
                            ManufacturerId = 7,
                            Name = "Бебешки надуваем пояс - проходилка Shui Zhong Bao Turtle",
                            Price = 5.75m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("58f6cd2e-fde0-40d1-ae28-d74f0d10616c"),
                            Barcode = 58762,
                            CategoryId = 6,
                            Description = "Насладете се на почивката със забавния надуваем дюшек във формата на близалка от Intex. Той е достатъчно голям, за да се чувствате удобно и комфортно върху него. Можете да го ползвате и в басейна и на плажа. Изработен е от висококачествен винил, което го прави устойчив на надраскване и разкъсване.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1LlSdpiheEAzizyC8CTE6W5p-PqOM3aIM",
                            ManufacturerId = 5,
                            Name = "Надуваем дюшек сладолед - фунийка INTEX, 224 Х 107см",
                            Price = 14.50m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("c87559f7-e748-44c7-88dd-ddda76d54eda"),
                            Barcode = 59720,
                            CategoryId = 6,
                            Description = "Отпуснете се в басейна и се забавлявайте на следващото парти това лято с този надуваем дюшек. Забавният дизайн създава освежаващо и забавно настроение, докато релаксирате на слънце през цялото лято.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1lJ8i3WaCL53t0pOO5F_7eJxxdWaH5v82",
                            ManufacturerId = 5,
                            Name = "Надуваем дюшек INTEX, 183 х 69 х 25см",
                            Price = 10.60m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("f2dad083-2c4b-4fc7-ba7a-7219b1410feb"),
                            Barcode = 58786,
                            CategoryId = 6,
                            Description = "Надуваем дюшек Ангелски крила INTEX. Размери и тегло - Размери: 251 x 106 см.; Тегло: 3.47 кг.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1hp_tZy8e3a2Cftw8b92YW8Gzop0-0wU1",
                            ManufacturerId = 5,
                            Name = "Надуваем дюшек Ангелски крила INTEX",
                            Price = 47.70m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("44c3a2e2-f357-4d22-b76c-59f003e15509"),
                            Barcode = 101730,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1ToYajGycJZx6PokZvD0Da0H8y5LWh89N",
                            ManufacturerId = 8,
                            Name = "Star  - Волейболна топка Miami Beach, 21см",
                            Price = 6.30m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("abe75d77-11a8-4799-837f-5e167573fff7"),
                            Barcode = 101019,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1o-NUO6kzfL2bRghOK21Nu0M9qdduDpW4",
                            ManufacturerId = 8,
                            Name = "Star  - Волейболна топка Bora Bora, 21см",
                            Price = 6.30m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("09ac49a1-1ba8-4ee5-95db-631fb0d593a6"),
                            Barcode = 101090,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=15hRmMAyIkXWcYw8PEVU8OTuRHWIsKVIU",
                            ManufacturerId = 8,
                            Name = "Star  - Волейболна топка Beach Volley, 21см",
                            Price = 6.30m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("24b486c2-3f00-47af-a0e6-7af9684afb31"),
                            Barcode = 101011,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://drive.google.com/uc?export=download&id=1Oygb8XuKN23Jloa9nCfWbEOGiiZmOhdd",
                            ManufacturerId = 8,
                            Name = "Star  - Волейболна топка Water Polo, 21см",
                            Price = 6.15m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ProductOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SingularPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.CartItem", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("CartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Delivery", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Deliveries")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Invoice", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Order", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Product", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ProductOrder", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Product", "Product")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Deliveries");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Delivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("ProductsOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
