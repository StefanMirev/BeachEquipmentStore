// <auto-generated />
using System;
using BeachEquipmentStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeachEquipmentStore.Data.Migrations
{
    [DbContext(typeof(EquipmentStoreDbContext))]
    [Migration("20240424214445_Changed_Img_Sources")]
    partial class Changed_Img_Sources
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77581a26-3535-45f3-b119-1e0daaf25941"),
                            CustomerId = new Guid("a4722015-9eb1-46dd-bc52-7492fa5196d4"),
                            Name = "ул. Кракра №3",
                            Town = "София",
                            ZipCode = 1000
                        },
                        new
                        {
                            Id = new Guid("a3771fd9-e6b0-4434-baca-d2721ee9c7e9"),
                            CustomerId = new Guid("306517b5-0a82-4049-b784-70cdba612c98"),
                            Name = "кв. Овча Купел, ул. Рачка №9",
                            Town = "София",
                            ZipCode = 1000
                        },
                        new
                        {
                            Id = new Guid("3f32193e-4a6d-4b79-b241-4d9aa6c2e8a5"),
                            CustomerId = new Guid("306517b5-0a82-4049-b784-70cdba612c98"),
                            Name = "ул. Обзорски Тигър № 33",
                            Town = "Обзор",
                            ZipCode = 1000
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4722015-9eb1-46dd-bc52-7492fa5196d4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad8e5d9a-4e5e-44d2-8ad6-a2cb01f033e0",
                            Email = "p.petrov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "P.PETROV@MAIL.COM",
                            NormalizedUserName = "P.PETROV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEZm+P5F6T9gPXLgOp4xiNqYew9NKpWDlW/pLTt08siKKvQL7m6moU2HWJGecEMbRw==",
                            PhoneNumber = "0876596224",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe938581-f53b-4d95-951a-ebb07ce38ab6",
                            TwoFactorEnabled = false,
                            UserName = "p.petrov@mail.com"
                        },
                        new
                        {
                            Id = new Guid("306517b5-0a82-4049-b784-70cdba612c98"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c88ad39f-fdb0-4291-9747-17a9c55e9ec6",
                            Email = "n.flacko@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Nicko",
                            LastName = "Flacko",
                            LockoutEnabled = false,
                            NormalizedEmail = "N.FLACKO@MAIL.COM",
                            NormalizedUserName = "N.FLACKO@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKWn3r0fCnyEGi4EYjUDZzPmVWFJLVmcwXPXvzsv85Gt/zlGWh9+/ggTfBzH5SsKjA==",
                            PhoneNumber = "0888202449",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5baef856-f07b-4405-a454-b4bd33016ed0",
                            TwoFactorEnabled = false,
                            UserName = "n.flacko@mail.com"
                        },
                        new
                        {
                            Id = new Guid("78b8aac7-b589-46b2-a8a0-145cf77bc8df"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fe40daa-f671-49d8-a5d7-7333b84408ee",
                            Email = "s.sarafov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamat",
                            LastName = "Sarafov",
                            LockoutEnabled = false,
                            NormalizedEmail = "S.SARAFOV@MAIL.COM",
                            NormalizedUserName = "S.SARAFOV@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENlm3ZeG9FntSUOvjjJkWw6aD75zQDcuDSmhdjCwpsIntTSJjQWjzhEl2x3d1pk5zQ==",
                            PhoneNumber = "0885527733",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe7fbb42-b2de-4d2d-bd75-ec4b6444d46b",
                            TwoFactorEnabled = false,
                            UserName = "s.sarafov@mail.com"
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.CartItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://i.ibb.co/vv0FD1X/Bag-Category.webp",
                            Name = "Чанти"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://i.ibb.co/rHY9wjG/Ball-Category.jpg",
                            Name = "Топки"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://i.ibb.co/6nHY7VJ/Beach-Toy-Category.webp",
                            Name = "Плажни играчи"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://i.ibb.co/JxJ4CSM/Floaty-Category.webp",
                            Name = "Надувни"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://i.ibb.co/JkDDZkb/Swimming-Equipment-Category.jpg",
                            Name = "Обурудвабе за плуване"
                        },
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://i.ibb.co/w6CNrfd/Towel-Category.webp",
                            Name = "Плажни кърпи"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://i.ibb.co/t4KWPCP/Umbrella-Category.jpg",
                            Name = "Чадъри"
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://i.ibb.co/7WJYhkr/Vinex-Manufacturer.jpg",
                            Name = "Vinex"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://i.ibb.co/JpRqHbV/Covari-Manufacturer.jpg",
                            Name = "Coveri Collection"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://i.ibb.co/nQHgsJG/Cps-Manufacturer.jpg",
                            Name = "CPS TOYS"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://i.ibb.co/1nkCLZw/Dreamfox.jpg",
                            Name = "DREAMFOX"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://i.ibb.co/s2Y1245/Intex-Manufacturer.jpg",
                            Name = "INTEX"
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "https://i.ibb.co/6PPhfyV/Publidea.jpg",
                            Name = "ПУБЛИИДЕЯ"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://i.ibb.co/QQ486yn/Shenzhen-Manufacturer.jpg",
                            Name = "Shenzhen Befine Sports Goods"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://i.ibb.co/K7N6Z0D/Shui-Manufacturer.jpg",
                            Name = "Shui Zhong Bao"
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://i.ibb.co/CKCRztx/Star-Manufacturer.jpg",
                            Name = "Star"
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://i.ibb.co/bPDRFNJ/Vanguard-Manufacturer.jpg",
                            Name = "Vanguard Watersports"
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TownName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Barcode")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e2902c3-ca63-4a45-a4ae-aec0a5ace868"),
                            Barcode = 57532,
                            CategoryId = 1,
                            Description = "Памучна детска плажна хавлия с изообразени акула и рибки. Грамаж: 380 гр.",
                            ImageUrl = "https://i.ibb.co/LkpTB85/Towel-Shark.jpg",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 75 x 170 cm.",
                            Price = 12.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("55f69f5a-0e04-4d62-8f5b-45419cca2a0b"),
                            Barcode = 38527,
                            CategoryId = 1,
                            Description = "Микрофибърна плажна хавлия с изоображение на морско дъно с 2 делфина и с надпис Bulgaria.",
                            ImageUrl = "https://i.ibb.co/6Xj3SVh/Towel-Dolphin.jpg",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 75 x 150 cm.",
                            Price = 4.80m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("290d18a3-a466-4d06-bddb-cdb3e6f1afb6"),
                            Barcode = 57523,
                            CategoryId = 1,
                            Description = "Памучна плажна хавлия с котвички, синя. Грамаж: 360 гр.",
                            ImageUrl = "https://i.ibb.co/y08sGtL/Towel-Plain-Blue.jpg",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 70 x 140 cm.",
                            Price = 9.30m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("a648aa92-4329-43d2-81eb-ec780b5b8f52"),
                            Barcode = 57526,
                            CategoryId = 1,
                            Description = "Памучна плажна хавлия с ананаси, розова. Грамаж: 360 гр.",
                            ImageUrl = "https://i.ibb.co/BCMvsmq/Towen-Plain-Pink.jpg",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 70 x 140 cm.",
                            Price = 9.30m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("523c9a67-0ac2-406c-aa8d-b6e7a33d208d"),
                            Barcode = 56130,
                            CategoryId = 1,
                            Description = "Микрофибърна плажна хавлия с изоображение на русалка и надписи.",
                            ImageUrl = "https://i.ibb.co/Fn52s1n/Towel-Mermaid.jpg",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 75 x 150 cm.",
                            Price = 5.00m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("c6e7bbb2-e3dc-44bf-9aca-5dfb86d5f153"),
                            Barcode = 58922,
                            CategoryId = 1,
                            Description = "Микрофибърна плажна хавлия с изоображение на китара поставена на плаж.",
                            ImageUrl = "https://i.ibb.co/XpYVKZ4/Towen-Seaside.jpg",
                            ManufacturerId = 4,
                            Name = "Плажна хавлия DREAMFOX 75 x 150 cm.",
                            Price = 4.80m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("850d9a82-cd77-400d-a9c0-d4c0186d9fd3"),
                            Barcode = 55555,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV25. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://i.ibb.co/6vxZ7wZ/Umbrella-Plain.jpg",
                            ManufacturerId = 10,
                            Name = "Пкажен чадър ПУБЛИИДЕЯ, тъмно-зелен.",
                            Price = 14.85m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("56bf2f6f-1352-4eea-8da6-dba3256096b7"),
                            Barcode = 44443,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV20+. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://i.ibb.co/vvtYT55/Umberlla-Plams.jpg",
                            ManufacturerId = 10,
                            Name = "Плажен чадър ПУБЛИИДЕЯ, палми",
                            Price = 6.80m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("42b96eaf-05c5-4a4a-9288-9fa4f9b3435b"),
                            Barcode = 44442,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV20+. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://i.ibb.co/Sv0DmBy/Umbrella-Plants.jpg",
                            ManufacturerId = 10,
                            Name = "Плажен чадър ПУБЛИИДЕЯ, растения",
                            Price = 7.50m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("e747a5f0-593e-482e-84fc-b9d02d6dbf37"),
                            Barcode = 44444,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV20+. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://i.ibb.co/ZmM9rZP/Umbrella-Starfish.jpg",
                            ManufacturerId = 10,
                            Name = "Плажен чадър ПУБЛИИДЕЯ, морски звезди",
                            Price = 6.80m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("b09a64b5-dc68-46e1-a3fa-58dd7b2aa810"),
                            Barcode = 56718,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени дини и черни палмови листа на бял фон.",
                            ImageUrl = "https://i.ibb.co/2MFJmGv/Bag-Watermellon.jpg",
                            ManufacturerId = 2,
                            Name = "Плажна Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("8fbc8a5e-3613-4b2a-b1da-5c1f072cddb4"),
                            Barcode = 56724,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени котва на син фон с рози. ",
                            ImageUrl = "https://i.ibb.co/BZYy30X/Bag-Anchor.jpg",
                            ManufacturerId = 2,
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("18985da9-1607-4dff-88ba-6c6e0162d0ca"),
                            Barcode = 56723,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени макове на черно-бял фон.",
                            ImageUrl = "https://i.ibb.co/LPnV4tL/BagPoppy.jpg",
                            ManufacturerId = 2,
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("6e872a30-de80-4db0-a0fb-bf9d28910fa8"),
                            Barcode = 56721,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени миди и рулове на бял фон.",
                            ImageUrl = "https://i.ibb.co/RhKgqG2/BagClams.jpg",
                            ManufacturerId = 2,
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("3fe6af5f-baee-4dc1-9322-0e0e8fa5062e"),
                            Barcode = 56720,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени орхидеи на бял фон.",
                            ImageUrl = "https://i.ibb.co/8bQ32MJ/Bag-Orchid.jpg",
                            ManufacturerId = 2,
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("607c0c28-57cf-43cf-87c3-a3103fd248d1"),
                            Barcode = 18040,
                            CategoryId = 4,
                            Description = "Комплектът съдържа гребло, лопатка, сито и формичка риба. Кофичката е с диаметър 29см.",
                            ImageUrl = "https://i.ibb.co/5vfvRwN/Toy-Bucket-Disney.jpg",
                            ManufacturerId = 1,
                            Name = "Vinex - Комплект кофичка за пясък Дисни",
                            Price = 8.25m,
                            Stock = 16
                        },
                        new
                        {
                            Id = new Guid("1365c748-0341-4482-bfae-3f946ce74878"),
                            Barcode = 17005,
                            CategoryId = 4,
                            Description = "Комплектът съдържа гребло, лопатка, сито и формички риба и костенурка. Кофичката е с диаметър 26см.",
                            ImageUrl = "https://i.ibb.co/cw3903C/Toy-Bucket-Plain.jpg",
                            ManufacturerId = 1,
                            Name = "Vinex - Комплект кофичка за пясък Дисни",
                            Price = 6.00m,
                            Stock = 16
                        },
                        new
                        {
                            Id = new Guid("5c493ca0-eb60-4c01-b530-6d85a2ba2045"),
                            Barcode = 10805,
                            CategoryId = 4,
                            Description = "Комплектът съдържа гребло, лопатка, сито и формички риба, костенурка, мида и морска звезда. Кофичката е с диаметър 26см.",
                            ImageUrl = "https://i.ibb.co/cX57F5w/Toy-Bucket-Cartoon.jpg",
                            ManufacturerId = 1,
                            Name = "Vinex - Комплект кофичка за пясък Дисни",
                            Price = 10.50m,
                            Stock = 16
                        },
                        new
                        {
                            Id = new Guid("20d8f378-3729-4534-bcfa-5d0f5538b700"),
                            Barcode = 33306,
                            CategoryId = 4,
                            Description = " Комплектът съдържа гребло, лопатка, сито, лейка и три формички замък. Кофичката е квадратна, с размери 16 х 16 см.",
                            ImageUrl = "https://i.ibb.co/86dL7D5/Toy-Bucket-Square.jpg",
                            ManufacturerId = 1,
                            Name = "Vinex - Комплект кофичка за пясък Дисни",
                            Price = 6.40m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("5d3fda40-ac4c-4552-9172-8aa1d8da4463"),
                            Barcode = 36113,
                            CategoryId = 4,
                            Description = "Лопата за пясък, дървена дръжка с дължина 62 см.",
                            ImageUrl = "https://i.ibb.co/WHxnBfw/Toy-Shovel.jpg",
                            ManufacturerId = 1,
                            Name = "Vinex - Лопата за пясък",
                            Price = 3.20m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("1339da9b-82cb-4670-ba55-c49f281d1161"),
                            Barcode = 58849,
                            CategoryId = 4,
                            Description = "Воден пистолет CPS TOYS, асортимент 38 см. Механизъм на помпата - функция помпане, дължина: 38 см, обем на резервоара: 900 мл, изстрелва водата до 8 метра!",
                            ImageUrl = "https://i.ibb.co/jf72Vv7/Toy-Water-Gun.jpg",
                            ManufacturerId = 3,
                            Name = "Воден пистолет CPS TOYS 50см",
                            Price = 7.40m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("d19e6ace-9306-4f06-9b17-50c7bb875c9a"),
                            Barcode = 42178,
                            CategoryId = 5,
                            Description = "Плувна маска за цяло лице в мрежа S, M силикон, синьо, електрикаво зелено, черно",
                            ImageUrl = "https://i.ibb.co/Ycbbt1d/Swimming-Mask.jpg",
                            ManufacturerId = 6,
                            Name = "Маска за плуване за цяло лице Shenzhen Befine Sports Goods ReefRider",
                            Price = 33.00m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("784106e3-be6b-4799-ba25-14ed4a03b0fd"),
                            Barcode = 59139,
                            CategoryId = 5,
                            Description = "Плавниците cа подходящи за гмуркане или тренировки по плуване. Tяхната площ ще даде възможноcт на вcеки любител на водните приключения да cе движи много по-бързо!",
                            ImageUrl = "https://i.ibb.co/xFGh6x2/Swimming-Fins-Children.jpg",
                            ManufacturerId = 9,
                            Name = "Плавници Vanguard Watersports Super Sport, 35-37 номер",
                            Price = 19.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("a3a9b2d9-8682-4747-a083-abb0b1ac414b"),
                            Barcode = 42181,
                            CategoryId = 5,
                            Description = "Плавниците cа подходящи за гмуркане или тренировки по плуване. Tяхната площ ще даде възможноcт на вcеки любител на водните приключения да cе движи много по-бързо!",
                            ImageUrl = "https://i.ibb.co/vZN4MxL/Swimming-Fins-Adult.jpg",
                            ManufacturerId = 9,
                            Name = "Плавници Vanguard Watersports Mega Sport, 39-43 номер",
                            Price = 19.50m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("18a5c412-1555-477f-b77d-7d493704f991"),
                            Barcode = 24040,
                            CategoryId = 5,
                            Description = "Шапка за плуване, текстил. Размери: 21 х 12 см.",
                            ImageUrl = "https://i.ibb.co/hZnkbPF/Swimming-Cap.jpg",
                            ManufacturerId = 9,
                            Name = "Шапка за плуване Vanguard Watersports, текстил",
                            Price = 1.35m,
                            Stock = 70
                        },
                        new
                        {
                            Id = new Guid("4b71df7a-2824-4e9d-8162-f3e458dca235"),
                            Barcode = 31386,
                            CategoryId = 5,
                            Description = "Плувни очила, силикон, цветни, здраво прелепващи 13 см. ",
                            ImageUrl = "https://i.ibb.co/BsKqYC7/Swimming-Goggles-Children.jpg",
                            ManufacturerId = 6,
                            Name = "Очила за плуване за деца Shenzhen Befine Sports Goods Fun Goggles",
                            Price = 4.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("125ac41c-65d1-401e-8825-46d193ff6cdd"),
                            Barcode = 51375,
                            CategoryId = 5,
                            Description = "Плувни очила за възрастни, широки, черен силикон 18х8 см.",
                            ImageUrl = "https://i.ibb.co/y0PGtTq/Swimming-Goggles-Adult.jpg",
                            ManufacturerId = 6,
                            Name = "Очила за плуване за възрастни Shenzhen Befine Sports Goods Water Sport",
                            Price = 7.00m,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("d490ab6a-c48e-4f5b-b49f-50efa22639dd"),
                            Barcode = 42174,
                            CategoryId = 5,
                            Description = "Мундщук от поливинилхлорид за меко и удобно прилягане. Дихателна тръба със среден диаметър и дължина 42 см. Дизайн идеален за деца.",
                            ImageUrl = "https://i.ibb.co/FYgw02D/Swimming-Snorkel-Children.jpg",
                            ManufacturerId = 6,
                            Name = "Детски шнорхел Shenzhen Befine Sports Goods Hi-Flo",
                            Price = 3.65m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("08b4327f-9eb3-4732-8058-483a9b70d765"),
                            Barcode = 42172,
                            CategoryId = 5,
                            Description = "Шнорхел за възрастни с удобен термопластичен гумен мундщукшнорхел. Дихателна тръба с висококачествена P.V.C. изработка и дължина 42 см.",
                            ImageUrl = "https://i.ibb.co/9v2Qr7q/Swimming-Snorkel-Adults.jpg",
                            ManufacturerId = 6,
                            Name = "Шнорхел Shenzhen Befine Sports Goods Easy-Flow",
                            Price = 5.50m,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("d04c49fb-3603-4f85-9828-a6d2f10c434e"),
                            Barcode = 58546,
                            CategoryId = 6,
                            Description = "Алигаторите нe ca тoлкoвa cтpaшни кoлкoтo cи миcлитe. Сeгa имaтe възмoжнocт дa ce зaбaвлявaтe c eдин oт тях в бaceйнa, морeто или дори и нa cушaтa. Алигаторът e c paзмepи, кoитo ca cхoдни c тeзи нa иcтинcкитe му cъбpaтя и e гoтoв зa мнoгo игpи c вaшият мaлчугaн. Изработен е от качествен винил и има 1 здрaва дръжка за захващане зa по-голямa уcтойчивоcт и cигурноcт нa дeтeто. Размер: 168 х 86 см.",
                            ImageUrl = "https://i.ibb.co/PsLkswc/Floaty-Crocodile.jpg",
                            ManufacturerId = 5,
                            Name = "Надуваема играчка Алигатор INTEX LIL' Gator Ride-on, малък",
                            Price = 19.85m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("930a9416-2342-4f6c-aafb-d19ffb9919f1"),
                            Barcode = 49230,
                            CategoryId = 6,
                            Description = "Кaквo мoжe дa нaпpaви плувaнeтo в бaceйнa или в мopeтo oщe пo-зaбaвнo? Нaпpимep aкo дeтeтo влeзe във вoдaтa с пояс с брокат със забавен дизайн във формата на еднорог. Размер: 90 см.",
                            ImageUrl = "https://i.ibb.co/j5MMjgM/Floaty-Unicorn.jpg",
                            ManufacturerId = 5,
                            Name = "Детски надуваем пояс INTEX Пони-Еднорог",
                            Price = 11.80m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("f10a4d58-7bd1-4388-9d11-fd7682cde5af"),
                            Barcode = 36727,
                            CategoryId = 6,
                            Description = "Надуваем остров с диаметър 70 см. Свеж дизайн. Въже за захващане.",
                            ImageUrl = "https://i.ibb.co/7tz51mq/Floaty-Melon.jpg",
                            ManufacturerId = 7,
                            Name = "Надуваем поясн Диня Shui Zhong Bao Watermelon",
                            Price = 4.20m,
                            Stock = 12
                        },
                        new
                        {
                            Id = new Guid("6dbcb1de-8082-4787-be51-98e1653bc601"),
                            Barcode = 56113,
                            CategoryId = 6,
                            Description = "Изработен е от качествен винил и има 4 въздушни камери, голям външeн пpъcтeн зa по-голямa cтaбилноcт и отвоpи зa кpaчeтaтa нa дeтeто, които оcигуpявaт нeговaтa бeзопacноcт и пpeдотвpaтявaт вepоятноcттa от изхлузване от пояca.",
                            ImageUrl = "https://i.ibb.co/H2wNG86/Floaty-Turtle-Babies.jpg",
                            ManufacturerId = 7,
                            Name = "Бебешки надуваем пояс - проходилка Shui Zhong Bao Turtle",
                            Price = 5.75m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("f62d4be2-3ac0-4294-b11f-e4ae72b86cf4"),
                            Barcode = 58762,
                            CategoryId = 6,
                            Description = "Насладете се на почивката със забавния надуваем дюшек във формата на близалка от Intex. Той е достатъчно голям, за да се чувствате удобно и комфортно върху него. Можете да го ползвате и в басейна и на плажа. Изработен е от висококачествен винил, което го прави устойчив на надраскване и разкъсване.",
                            ImageUrl = "https://i.ibb.co/1dzzG9V/Floaty-Ice-Cream.jpg",
                            ManufacturerId = 5,
                            Name = "Надуваем дюшек сладолед - фунийка INTEX, 224 Х 107см",
                            Price = 14.50m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("a3d456ac-c3f3-43e2-92a4-0765b52b3c32"),
                            Barcode = 59720,
                            CategoryId = 6,
                            Description = "Отпуснете се в басейна и се забавлявайте на следващото парти това лято с този надуваем дюшек. Забавният дизайн създава освежаващо и забавно настроение, докато релаксирате на слънце през цялото лято.",
                            ImageUrl = "https://i.ibb.co/G0WBydZ/Floaty-Bed.jpg",
                            ManufacturerId = 5,
                            Name = "Надуваем дюшек INTEX, 183 х 69 х 25см",
                            Price = 10.60m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("651d8dc2-0d4a-4320-97e1-350d0b391714"),
                            Barcode = 58786,
                            CategoryId = 6,
                            Description = "Надуваем дюшек Ангелски крила INTEX. Размери и тегло - Размери: 251 x 106 см.; Тегло: 3.47 кг.",
                            ImageUrl = "https://i.ibb.co/K7LDFSq/Floaty-Wings.jpg",
                            ManufacturerId = 5,
                            Name = "Надуваем дюшек Ангелски крила INTEX",
                            Price = 47.70m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("0455d510-5fd7-4b29-bbf2-dd427f9c9d03"),
                            Barcode = 101730,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://i.ibb.co/3h3MV9H/Ball-Miami.jpg",
                            ManufacturerId = 8,
                            Name = "Star  - Волейболна топка Miami Beach, 21см",
                            Price = 6.30m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("cefe05e5-157d-45f6-8f1a-da33bd6dbe91"),
                            Barcode = 101019,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://i.ibb.co/pQJZTcp/Ball-Bora-Bora.jpg",
                            ManufacturerId = 8,
                            Name = "Star  - Волейболна топка Bora Bora, 21см",
                            Price = 6.30m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("491cd95b-92d9-47e1-8d2e-c89149d0fccc"),
                            Barcode = 101090,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://i.ibb.co/HgMXxMb/Ball-Beach-Palms.jpg",
                            ManufacturerId = 8,
                            Name = "Star  - Волейболна топка Beach Volley, 21см",
                            Price = 6.30m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("0cec1507-a629-4ed2-a483-fcc0ac84b4d3"),
                            Barcode = 101011,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://i.ibb.co/qnd7sVN/Ball-Water-Polo.jpg",
                            ManufacturerId = 8,
                            Name = "Star  - Волейболна топка Water Polo, 21см",
                            Price = 6.15m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ProductOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SingularPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Address", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.CartItem", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("CartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Order", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Product", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ProductOrder", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Product", "Product")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("ProductsOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
