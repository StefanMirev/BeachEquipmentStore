// <auto-generated />
using System;
using BeachEquipmentStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeachEquipmentStore.Data.Migrations
{
    [DbContext(typeof(EquipmentStoreDbContext))]
    [Migration("20230808105326_SeededDb")]
    partial class SeededDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8cee753d-4b6e-42fb-9841-2e8b5e9c6eb8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "904707bd-512d-47e0-9b22-388c90a107f4",
                            Email = "p.petrov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "p.petrov@mail.com",
                            NormalizedUserName = "p.petrov@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEADcAIUnt8CbMMBFsJwuF/Y9RNHKLKQ7hoERlzx2SeBLONmR3G0oZ61fmk7M1tb25g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "p.petrov@mail.com"
                        },
                        new
                        {
                            Id = new Guid("0f145dcb-a166-41e9-82f2-c814f8a93e9d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b01f8e0e-2173-4e97-8e60-59b6b3a3db4b",
                            Email = "n.flacko@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Nicko",
                            LastName = "Flacko",
                            LockoutEnabled = false,
                            NormalizedEmail = "n.flacko@mail.com",
                            NormalizedUserName = "n.flacko@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+lL3TdxwC4mbFiKjdzM24KzADTdM1W6sL6O6pjeBjy2vhf3X/VT3Vy3vamUfquhA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "n.flacko@mail.com"
                        },
                        new
                        {
                            Id = new Guid("c3e98537-479f-4936-8af4-066181b328f7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4554082-d4ed-4566-abbc-f451d4401bfd",
                            Email = "s.sarafov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamat",
                            LastName = "Sarafov",
                            LockoutEnabled = false,
                            NormalizedEmail = "s.sarafov@mail.com",
                            NormalizedUserName = "s.sarafov@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAgpDepUbl1V3qZ7QKvKPEq1pN9JTv0yRNOfeXHZybsviTmQLPE7ceYKyFhT6N8jIA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "s.sarafov@mail.com"
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.CartItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Bag"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ball"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Beach Toy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Floaty"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Swimming Equipment"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Towel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Umbrella"
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeliveryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Barcode")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77966e06-3756-4dd3-b20e-42ad2686fc1d"),
                            Barcode = 57532,
                            CategoryId = 1,
                            Description = "Памучна детска плажна хавлия с изообразени акула и рибки. Грамаж: 380 гр.",
                            ImageUrl = "https://drive.google.com/file/d/1PYh4hEw0qfRH8mDV5fsetWNsk7M5O2pM/view?usp=drive_link",
                            ManufacturerName = "DREAMFOX",
                            Name = "Плажна хавлия DREAMFOX 75 x 170 cm.",
                            Price = 12.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("cf0e748d-5d73-43f8-ae9d-95c62213438b"),
                            Barcode = 38527,
                            CategoryId = 1,
                            Description = "Микрофибърна плажна хавлия с изоображение на морско дъно с 2 делфина и с надпис Bulgaria.",
                            ImageUrl = "https://drive.google.com/file/d/1ae-zH1gOHkFhigYFkQMz8L25bZq7LcRF/view?usp=drive_link",
                            ManufacturerName = "DREAMFOX",
                            Name = "Плажна хавлия DREAMFOX 75 x 150 cm.",
                            Price = 4.80m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("6f7428c8-aacb-4a82-aef3-e5e4ec29cc4a"),
                            Barcode = 57523,
                            CategoryId = 1,
                            Description = "Памучна плажна хавлия с котвички, синя. Грамаж: 360 гр.",
                            ImageUrl = "https://drive.google.com/file/d/1ZJXJwrHzVu1ptT0qk99CKB3IAJv324dd/view?usp=drive_link",
                            ManufacturerName = "DREAMFOX",
                            Name = "Плажна хавлия DREAMFOX 70 x 140 cm.",
                            Price = 9.30m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("ba1b2162-6cc7-48fb-a8ab-41f764e6f23c"),
                            Barcode = 57526,
                            CategoryId = 1,
                            Description = "Памучна плажна хавлия с ананаси, розова. Грамаж: 360 гр.",
                            ImageUrl = "https://drive.google.com/file/d/1jjuQ2_r0SZ0QXRLjRFBnuhNIEKtPy1ZF/view?usp=drive_link",
                            ManufacturerName = "DREAMFOX",
                            Name = "Плажна хавлия DREAMFOX 70 x 140 cm.",
                            Price = 9.30m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("60adf7ac-0f74-44d9-849b-6469f526fa6e"),
                            Barcode = 56130,
                            CategoryId = 1,
                            Description = "Микрофибърна плажна хавлия с изоображение на русалка и надписи.",
                            ImageUrl = "https://drive.google.com/file/d/1Yp_6Hqt9ZonWq42xy8fU--Uacx1tkxXH/view?usp=drive_link",
                            ManufacturerName = "DREAMFOX",
                            Name = "Плажна хавлия DREAMFOX 75 x 150 cm.",
                            Price = 5.00m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("e89dfa86-3269-4870-9374-9dcda5c29751"),
                            Barcode = 58922,
                            CategoryId = 1,
                            Description = "Микрофибърна плажна хавлия с изоображение на китара поставена на плаж.",
                            ImageUrl = "https://drive.google.com/file/d/1dfT4IZEew4CoddEGDakT-PBjw7yredbB/view?usp=drive_link",
                            ManufacturerName = "DREAMFOX",
                            Name = "Плажна хавлия DREAMFOX 75 x 150 cm.",
                            Price = 4.80m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("f1112f56-b171-43ed-887c-43f30cff9600"),
                            Barcode = 55555,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV25. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://drive.google.com/file/d/1NMIiyeqiycf5b3uR53YIMXiBBWeJac16/view?usp=drive_link",
                            ManufacturerName = "ПУБЛИИДЕЯ",
                            Name = "Пкажен чадър ПУБЛИИДЕЯ, тъмно-зелен.",
                            Price = 14.85m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("8c025ee1-1118-43a0-b7f9-5ce0d2d4615a"),
                            Barcode = 44443,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV20+. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://drive.google.com/file/d/1oVbyay6s_Ntr_sj_A18X_FO0w_WmdrVQ/view?usp=drive_link",
                            ManufacturerName = "ПУБЛИИДЕЯ",
                            Name = "Плажен чадър ПУБЛИИДЕЯ, палми",
                            Price = 6.80m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("ea6a93de-f5fe-4185-bc85-c397afbffb08"),
                            Barcode = 44442,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV20+. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://drive.google.com/file/d/1mrbRxFOHCZAJIHd83oLjKRuAMdqimIO1/view?usp=drive_link",
                            ManufacturerName = "ПУБЛИИДЕЯ",
                            Name = "Плажен чадър ПУБЛИИДЕЯ, растения",
                            Price = 7.50m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("243ae335-fd35-4100-b196-c659e1b3dce2"),
                            Barcode = 44444,
                            CategoryId = 2,
                            Description = "Чадърите на \"Публиидея\" са перфектният аксесоар за горещите дни на плажа и ще Ви предпази парещите слънчеви лъчи. Лeceн е зa мoнтиpaнe, ocигypявa зaщитa oт cлънчeвитe лъчи UV20+. Moжe лecнo дa бъдe нагласен в кoятo и дa e пocoкa, блaгoдapeниe нa чупещошд рамо. Диаметър: 100 см.",
                            ImageUrl = "https://drive.google.com/file/d/1S-SjmPB2kfixmsIlSWYhYJch_9xqVK0A/view?usp=drive_link",
                            ManufacturerName = "ПУБЛИИДЕЯ",
                            Name = "Плажен чадър ПУБЛИИДЕЯ, морски звезди",
                            Price = 6.80m,
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("85e004c2-97b3-435d-811c-134531801a70"),
                            Barcode = 56718,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени дини и черни палмови листа на бял фон.",
                            ImageUrl = "https://drive.google.com/file/d/12boBcMRZIpNh9RHSF3hyMASdtpKv8gMH/view?usp=drive_link",
                            ManufacturerName = "Coveri Collection",
                            Name = "Плажна Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("e7980739-455e-4c40-888a-b73b4488caee"),
                            Barcode = 56724,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени котва на син фон с рози. ",
                            ImageUrl = "https://drive.google.com/file/d/1XL6OqirslpRwE0yS-3Jjn_SnDTBsedSc/view?usp=drive_link",
                            ManufacturerName = "Coveri Collection",
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("a353b862-3b99-448f-a079-4d633edc83c7"),
                            Barcode = 56723,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени макове на черно-бял фон.,,53х37х19 см.",
                            ImageUrl = "https://drive.google.com/file/d/1EI1p_s8zneNfoFyswCEYo-LBG97G5foZ/view?usp=drive_link",
                            ManufacturerName = "Coveri Collection",
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("f68e4d39-c46a-4b82-9ce6-bfddd12343fe"),
                            Barcode = 56721,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени миди и рулове на бял фон.",
                            ImageUrl = "https://drive.google.com/file/d/15DkwJKv2YFkzVRMBR-z6mY9lTYSEwCsk/view?usp=drive_link",
                            ManufacturerName = "Coveri Collection",
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("73b3dd8b-09e3-4e5a-92b6-cbca72e3a3e1"),
                            Barcode = 56720,
                            CategoryId = 3,
                            Description = "Плажна чанта с плетени дръжки и изообразени орхидеи на бял фон.",
                            ImageUrl = "https://drive.google.com/file/d/1adYxmlrmBP1xxUCMSUHr1hzxgyB_V27e/view?usp=drive_link",
                            ManufacturerName = "Coveri Collection",
                            Name = "Плажна чанта Coveri Collection 53х37х19",
                            Price = 8.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("8cedf6ed-c6e2-4b8d-ac59-10b3b04a4327"),
                            Barcode = 18040,
                            CategoryId = 4,
                            Description = "Комплектът съдържа гребло, лопатка, сито и формичка риба. Кофичката е с диаметър 29см.",
                            ImageUrl = "https://drive.google.com/file/d/1sQ_5ozky2WPN8SW5c9bMvr-zPV2U9atS/view?usp=drive_link",
                            ManufacturerName = "Bhalla International",
                            Name = "Bhalla International - Комплект кофичка за пясък Дисни",
                            Price = 8.25m,
                            Stock = 16
                        },
                        new
                        {
                            Id = new Guid("a5514002-86f9-4ac5-bb16-6be6321541dc"),
                            Barcode = 17005,
                            CategoryId = 4,
                            Description = "Комплектът съдържа гребло, лопатка, сито и формички риба и костенурка. Кофичката е с диаметър 26см.",
                            ImageUrl = "https://drive.google.com/file/d/1u_kQta03e24rGbuGlml_sr6IeyTim7JK/view?usp=drive_link",
                            ManufacturerName = "Bhalla International",
                            Name = "Bhalla International - Комплект кофичка за пясък Дисни",
                            Price = 6.00m,
                            Stock = 16
                        },
                        new
                        {
                            Id = new Guid("2306717d-3d88-4d9f-ab28-7848f5189433"),
                            Barcode = 10805,
                            CategoryId = 4,
                            Description = "Комплектът съдържа гребло, лопатка, сито и формички риба, костенурка, мида и морска звезда. Кофичката е с диаметър 26см.",
                            ImageUrl = "https://drive.google.com/file/d/1JjBWp9oO8b9j8EOH9c4LKPg1NrsLoUQG/view?usp=drive_link",
                            ManufacturerName = "Bhalla International",
                            Name = "Bhalla International - Комплект кофичка за пясък Дисни",
                            Price = 10.50m,
                            Stock = 16
                        },
                        new
                        {
                            Id = new Guid("25b81a48-248a-4d3a-97dd-177e946785dd"),
                            Barcode = 33306,
                            CategoryId = 4,
                            Description = " Комплектът съдържа гребло, лопатка, сито, лейка и три формички замък. Кофичката е квадратна, с размери 16 х 16 см.",
                            ImageUrl = "https://drive.google.com/file/d/1LbA7ETiJBsPWSoxG2jRZz9BHZd91mqHU/view?usp=drive_link",
                            ManufacturerName = "Bhalla International",
                            Name = "Bhalla International - Комплект кофичка за пясък Дисни",
                            Price = 6.40m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("37065dd4-f1ff-436e-908f-4f5487cd0086"),
                            Barcode = 36113,
                            CategoryId = 4,
                            Description = "Лопата за пясък, дървена дръжка с дължина 62 см.",
                            ImageUrl = "https://drive.google.com/file/d/16sOlSA_p-RfVy4nrdsvQWqsFxhyf1rhU/view?usp=drive_link",
                            ManufacturerName = "Bhalla International",
                            Name = "Bhalla International - Лопата за пясък",
                            Price = 3.20m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("aceee187-c44c-4634-8913-9f301c237656"),
                            Barcode = 58849,
                            CategoryId = 4,
                            Description = "Воден пистолет CPS TOYS, асортимент 38 см. Механизъм на помпата - функция помпане, дължина: 38 см, обем на резервоара: 900 мл, изстрелва водата до 8 метра!",
                            ImageUrl = "https://drive.google.com/file/d/1aasYu2UAFcDPLa6fV-pcOjlpOCXf1xgL/view?usp=drive_link",
                            ManufacturerName = "CPS TOYS",
                            Name = "Воден пистолет CPS TOYS 50см",
                            Price = 7.40m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("06baa812-69ef-4f26-b14c-66a6d6d86561"),
                            Barcode = 42178,
                            CategoryId = 5,
                            Description = "Плувна маска за цяло лице в мрежа S, M силикон, синьо, електрикаво зелено, черно",
                            ImageUrl = "https://drive.google.com/file/d/1sJxETpJF_FUSyeCO1b4WZXIrgvZjMfQz/view?usp=drive_link",
                            ManufacturerName = "Shenzhen Befine Sports Goods",
                            Name = "Маска за плуване за цяло лице Shenzhen Befine Sports Goods ReefRider",
                            Price = 33.00m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("e1c2eb58-5a86-495e-846d-3d15c483c35a"),
                            Barcode = 59139,
                            CategoryId = 5,
                            Description = "Плавниците cа подходящи за гмуркане или тренировки по плуване. Tяхната площ ще даде възможноcт на вcеки любител на водните приключения да cе движи много по-бързо!",
                            ImageUrl = "https://drive.google.com/file/d/1zGEEZkv8QtIt_HSyBbPimT8mPaUZs8aI/view?usp=drive_link",
                            ManufacturerName = "Vanguard Watersports",
                            Name = "Плавници Vanguard Watersports Super Sport, 35-37 номер",
                            Price = 19.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("249313f1-1422-445d-8a16-ef811da3dee9"),
                            Barcode = 42181,
                            CategoryId = 5,
                            Description = "Плавниците cа подходящи за гмуркане или тренировки по плуване. Tяхната площ ще даде възможноcт на вcеки любител на водните приключения да cе движи много по-бързо!",
                            ImageUrl = "https://drive.google.com/file/d/1wfcyQO9cHxFYAf-XXfE0DJQjeojKCEnm/view?usp=drive_link",
                            ManufacturerName = "Vanguard Watersports",
                            Name = "Плавници Vanguard Watersports Mega Sport, 39-43 номер",
                            Price = 19.50m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("79450932-c1cd-4758-a39c-b987ca763718"),
                            Barcode = 24040,
                            CategoryId = 5,
                            Description = "Шапка за плуване, текстил. Размери: 21 х 12 см.",
                            ImageUrl = "https://drive.google.com/file/d/1UdlrRM5yS8ly-EHrcnxlAjZ9o6gyVJys/view?usp=drive_link",
                            ManufacturerName = "Vanguard Watersports",
                            Name = "Шапка за плуване Vanguard Watersports, текстил",
                            Price = 1.35m,
                            Stock = 70
                        },
                        new
                        {
                            Id = new Guid("09fcc4af-5067-46f2-93c0-514bb44b864c"),
                            Barcode = 31386,
                            CategoryId = 5,
                            Description = "Плувни очила, силикон, цветни, здраво прелепващи 13 см. ",
                            ImageUrl = "https://drive.google.com/file/d/1nS0CyhxqSuY2D1R_jaxCbN9IiSI4F62p/view?usp=drive_link",
                            ManufacturerName = "Shenzhen Befine Sports Goods",
                            Name = "Очила за плуване за деца Shenzhen Befine Sports Goods Fun Goggles",
                            Price = 4.50m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("dce38c78-6b86-4d3d-8c0e-50df3c2e5f8e"),
                            Barcode = 51375,
                            CategoryId = 5,
                            Description = "Плувни очила за възрастни, широки, черен силикон 18х8 см.",
                            ImageUrl = "https://drive.google.com/file/d/1AKwwgKcCo1oKSLdLI8TrEjsE2y2Serux/view?usp=drive_link",
                            ManufacturerName = "Shenzhen Befine Sports Goods",
                            Name = "Очила за плуване за възрастни Shenzhen Befine Sports Goods Water Sport",
                            Price = 7.00m,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("510438af-3648-4a5d-830d-bed1ffbecd4d"),
                            Barcode = 42174,
                            CategoryId = 5,
                            Description = "Мундщук от поливинилхлорид за меко и удобно прилягане. Дихателна тръба със среден диаметър и дължина 42 см. Дизайн идеален за деца.",
                            ImageUrl = "https://drive.google.com/file/d/1e-Uh-JIgG65zKjRMtJjnEkkIabVNMNAP/view?usp=drive_link",
                            ManufacturerName = "Shenzhen Befine Sports Goods",
                            Name = "Детски шнорхел Shenzhen Befine Sports Goods Hi-Flo",
                            Price = 3.65m,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("36aa7b4e-c14b-47f7-af8f-a0fe1dd33bff"),
                            Barcode = 42172,
                            CategoryId = 5,
                            Description = "Шнорхел за възрастни с удобен термопластичен гумен мундщукшнорхел. Дихателна тръба с висококачествена P.V.C. изработка и дължина 42 см.",
                            ImageUrl = "https://drive.google.com/file/d/1C9Y9oufHYoCX_vLi11RMZdvCpO9QIMTX/view?usp=drive_link",
                            ManufacturerName = "Shenzhen Befine Sports Goods",
                            Name = "Шнорхел Shenzhen Befine Sports Goods Easy-Flow",
                            Price = 5.50m,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("e0f12f99-62d2-4d94-9036-e883757c426f"),
                            Barcode = 58546,
                            CategoryId = 6,
                            Description = "Алигаторите нe ca тoлкoвa cтpaшни кoлкoтo cи миcлитe. Сeгa имaтe възмoжнocт дa ce зaбaвлявaтe c eдин oт тях в бaceйнa, морeто или дори и нa cушaтa. Алигаторът e c paзмepи, кoитo ca cхoдни c тeзи нa иcтинcкитe му cъбpaтя и e гoтoв зa мнoгo игpи c вaшият мaлчугaн. Изработен е от качествен винил и има 1 здрaва дръжка за захващане зa по-голямa уcтойчивоcт и cигурноcт нa дeтeто. Размер: 168 х 86 см.",
                            ImageUrl = "https://drive.google.com/file/d/1spWbPR_54kid2eAV123eVgE_LruRdIHr/view?usp=drive_link",
                            ManufacturerName = "INTEXT",
                            Name = "Надуваема играчка Алигатор INTEX LIL' Gator Ride-on, малък",
                            Price = 19.85m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("b7a153ae-a939-4818-98c9-e8020025556d"),
                            Barcode = 49230,
                            CategoryId = 6,
                            Description = "Кaквo мoжe дa нaпpaви плувaнeтo в бaceйнa или в мopeтo oщe пo-зaбaвнo? Нaпpимep aкo дeтeтo влeзe във вoдaтa с пояс с брокат със забавен дизайн във формата на еднорог. Размер: 90 см.",
                            ImageUrl = "https://drive.google.com/file/d/1tDKCXmwpMGz6xseWKB8vWZvdMvow_SrR/view?usp=drive_link",
                            ManufacturerName = "Shui Zhong Bao",
                            Name = "Детски надуваем пояс INTEX Пони-Еднорог",
                            Price = 11.80m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("2b8477b5-3308-410c-8ea5-3800ef44fe2a"),
                            Barcode = 36727,
                            CategoryId = 6,
                            Description = "Надуваем остров с диаметър 70 см. Свеж дизайн. Въже за захващане.",
                            ImageUrl = "https://drive.google.com/file/d/1JkLtx0CX48PtHvBwe9wHKmOULBSh_zNJ/view?usp=drive_link",
                            ManufacturerName = "Shui Zhong Bao",
                            Name = "Надуваем поясн Диня Shui Zhong Bao Watermelon",
                            Price = 4.20m,
                            Stock = 12
                        },
                        new
                        {
                            Id = new Guid("c84153e0-b15b-49f8-ae71-7d84bbb5cdb3"),
                            Barcode = 56113,
                            CategoryId = 6,
                            Description = "Изработен е от качествен винил и има 4 въздушни камери, голям външeн пpъcтeн зa по-голямa cтaбилноcт и отвоpи зa кpaчeтaтa нa дeтeто, които оcигуpявaт нeговaтa бeзопacноcт и пpeдотвpaтявaт вepоятноcттa от изхлузване от пояca.",
                            ImageUrl = "https://drive.google.com/file/d/1l-4jA8i9_cKkRwVqIcPayyx7RjECP9tB/view?usp=drive_link",
                            ManufacturerName = "Shui Zhong Bao",
                            Name = "Бебешки надуваем пояс - проходилка Shui Zhong Bao Turtle",
                            Price = 5.75m,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("eb33dd10-b17e-42f9-ad18-29dffde33f80"),
                            Barcode = 58762,
                            CategoryId = 6,
                            Description = "Насладете се на почивката със забавния надуваем дюшек във формата на близалка от Intex. Той е достатъчно голям, за да се чувствате удобно и комфортно върху него. Можете да го ползвате и в басейна и на плажа. Изработен е от висококачествен винил, което го прави устойчив на надраскване и разкъсване.",
                            ImageUrl = "https://drive.google.com/file/d/1LlSdpiheEAzizyC8CTE6W5p-PqOM3aIM/view?usp=drive_link",
                            ManufacturerName = "INTEX",
                            Name = "Надуваем дюшек сладолед - фунийка INTEX, 224 Х 107см",
                            Price = 14.50m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("28276ce4-ac70-4d41-a2ac-a6c63a5ce112"),
                            Barcode = 59720,
                            CategoryId = 6,
                            Description = "Отпуснете се в басейна и се забавлявайте на следващото парти това лято с този надуваем дюшек. Забавният дизайн създава освежаващо и забавно настроение, докато релаксирате на слънце през цялото лято.",
                            ImageUrl = "https://drive.google.com/file/d/1lJ8i3WaCL53t0pOO5F_7eJxxdWaH5v82/view?usp=drive_link",
                            ManufacturerName = "INTEX",
                            Name = "Надуваем дюшек INTEX, 183 х 69 х 25см",
                            Price = 10.60m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("816e6dc9-395c-4564-bab6-d9bcb9f8d288"),
                            Barcode = 58786,
                            CategoryId = 6,
                            Description = "Надуваем дюшек Ангелски крила INTEX. Размери и тегло - Размери: 251 x 106 см.; Тегло: 3.47 кг.",
                            ImageUrl = "https://drive.google.com/file/d/1hp_tZy8e3a2Cftw8b92YW8Gzop0-0wU1/view?usp=drive_link",
                            ManufacturerName = "INTEXT",
                            Name = "Надуваем дюшек Ангелски крила INTEX",
                            Price = 47.70m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("564924bd-cd48-41e5-9229-497a2b846220"),
                            Barcode = 101730,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://drive.google.com/file/d/1ToYajGycJZx6PokZvD0Da0H8y5LWh89N/view?usp=drive_link",
                            ManufacturerName = "Star",
                            Name = "Star  - Волейболна топка Miami Beach, 21см",
                            Price = 6.30m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("232921d1-fba1-42af-a876-3622ac713711"),
                            Barcode = 101019,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://drive.google.com/file/d/1o-NUO6kzfL2bRghOK21Nu0M9qdduDpW4/view?usp=drive_link",
                            ManufacturerName = "Star",
                            Name = "Star  - Волейболна топка Bora Bora, 21см",
                            Price = 6.30m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("01a4f244-7f2d-4cfb-bf9a-4838625adb74"),
                            Barcode = 101090,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://drive.google.com/file/d/15hRmMAyIkXWcYw8PEVU8OTuRHWIsKVIU/view?usp=drive_link",
                            ManufacturerName = "Star",
                            Name = "Star  - Волейболна топка Beach Volley, 21см",
                            Price = 6.30m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("0a54ed73-d034-48ec-8794-421eb75c7027"),
                            Barcode = 101011,
                            CategoryId = 7,
                            Description = "Висококачествена топка с диаметър 21см. Игрите с топка ще помогнат на децата да задоволят естественото си желание за движение по забавен начин. Те използват енергията си по подходящ начин - активното движение на чист въздух е полезно за здравето и в същото време носи радост от играта.",
                            ImageUrl = "https://drive.google.com/file/d/1Oygb8XuKN23Jloa9nCfWbEOGiiZmOhdd/view?usp=drive_link",
                            ManufacturerName = "Star",
                            Name = "Star  - Волейболна топка Water Polo, 21см",
                            Price = 6.15m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ProductOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SingularPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.CartItem", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("CartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Delivery", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Deliveries")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Invoice", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Order", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Product", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ProductOrder", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.Product", "Product")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BeachEquipmentStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Deliveries");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Delivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Order", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("BeachEquipmentStore.Data.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("ProductsOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
